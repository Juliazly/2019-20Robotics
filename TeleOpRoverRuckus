package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;

import java.util.Locale;

/**
 * Created by ashley.peake on 8/30/2018.
 * Modified by Julia Zhou
 */



@TeleOp (name= "TeleOpRoverRuckus", group= "Linear Opmode")
public class TeleOpRoverRuckus extends LinearOpMode {

    HardwareRoverRuckus Rover = new HardwareRoverRuckus();

    ElapsedTime runtime = new ElapsedTime();

    @Override

    public void runOpMode() {

        telemetry.addData("init pressed", "about to initialize");
        telemetry.update();

        Rover.initializeRobot(hardwareMap);


        telemetry.addData("Status", "Ready to run");
        telemetry.update();

        waitForStart();


        while (opModeIsActive()) {


            double fwdBack = -gamepad1.right_stick_y;
            double strafe = -gamepad1.right_stick_x;
            double turn = -gamepad1.left_stick_x;


            if (gamepad1.start) { // drive robot at slower speed for fine adjustments while carrying gold

                Rover.leftFront.setPower((fwdBack + 2 * strafe - turn) * .25);
                Rover.leftBack.setPower((fwdBack - 1.5 * strafe - turn) * .25);
                Rover.rightFront.setPower((-fwdBack + 1.5 * strafe - turn) * .25);
                Rover.rightBack.setPower((-fwdBack - 1.5 * strafe - turn) * .25);

            } else { // drive robot normally at full speed

                Rover.leftFront.setPower((fwdBack + strafe - turn));
                Rover.leftBack.setPower((fwdBack - strafe - turn) * .9);
                Rover.rightFront.setPower((-fwdBack + strafe - turn) * .9);
                Rover.rightBack.setPower((-fwdBack - strafe - turn));

            }


            /**Julia - try this, likely needs modification.
             * I have declared and initialized scissorLiftB in HardwareRoverRucks
             * The two lifts will move in the same direction together
             */

            if (gamepad2.dpad_down){
                Rover.liftA(1.0);
                Rover.liftB(1.0);
            }else if (gamepad2.dpad_up){
                Rover.liftA(-1.0);
                Rover.liftB(-1.0);
            }else {
                Rover.liftA(0);
                Rover.liftB(0);
            }




           /*

            if (gamepad2.dpad_up) {
                Rover.liftA(1);
            } else if (gamepad2.dpad_down) {
                Rover.liftA(-1);
            } else {
                Rover.liftA(0);
            }



           if (gamepad2.dpad_up) {
                Rover.liftB(1);
            } else if (gamepad2.dpad_down) {
                Rover.liftB(-1);
            } else {
                Rover.liftB(0);
            }*/

/*
            if (gamepad1.right_bumper) {
                Rover.pinion(1);
            } else if (gamepad1.left_bumper) {
                Rover.pinion(-1);
            } else {
                Rover.pinion(0);
            }
*/
            /*if (gamepad2.dpad_up) {
                Rover.handA(1);
            } else if (gamepad2.dpad_down) {
                Rover.handA(-1);
            } else {
                Rover.handA(0);

            }
            if (gamepad2.dpad_up) {
                Rover.handB(1);
            } else if (gamepad2.dpad_down) {
                Rover.handB(-1);
            } else {
                Rover.handB(0);
            }*/


        }
    }
}

